openapi: 3.0.0
info:
  title: bizico API.
  description: |
    API looks somewhat restish but not complitely.
    
    #### Used status codes:
    - `200`, `201`, `301` - **Everythig is ok.**
    - `400`, `401`, `403`, `404` - **API errors.**
    - `500` - **Shit's fucked.**
    
    #### Possible Error Codes:
    - `E000` - **Validation Error**
    - `E001` - **Authorization Error**
    - `E002` - **Does Nopt Exist Error**
    - `E003` - **Reference Error**
    - `E004` - **Inactive User Error**
    - `E005` - **Parse Error**
    - `E101` - **Email Service Error**
    - `E102` - **Phone Service Error**
    - `E103` - **File Storage Service Error**

    If you encounter anything else, then someone messed up. 
    Most errors containt code (like `A000`) that are described in responses.
    
    Some things might not work yet.
    Everything here is a subject to change.
    ___
    #### Filtering

    The `filter` querystring parameter allows clients to filter a collection of resources that are addressed by a request URL.
    The expression specified with `filter` is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response.
    Resources for which the expression evaluates to false or to null, or which reference properties that are unavailable due to permissions, are omitted from the response.

    **Example:** return all Products whose Price is less than $10.00 

    `GET https://api.contoso.com/v1.0/products?filter=price lt 10.00`

    The value of the `filter` option is a **Boolean** expression.

    #### Filter operations

    Services that support `filter` **SHOULD** support the following minimal set of operations.

     - `eq`  **Equalcity**  *eq 'Redmond'*
     - `ne`  **Not equal** *city ne 'London'*
     - `gt`  **Greater than**  *price gt 20*
     - `ge`  **Greater than or equal**  *price ge 10*
     - `lt`  **Less than** *price lt 20*
     - `le`  **Less than or equal**  *price le 100*
     - `lk`  **SQL LIKE** *name lk %me%*
     - `il`  **SQL ILIKE**  *name lk %ME%*
 
    Logical Operators    
    
     - `and` **Logical and**  *price le 200 and price gt 3.5*
     - `or` **Logical or**  *price le 3.5 or price gt 200*

    Grouping Operators    
     
     - `( )` **Precedence grouping**   *(priority eq 1 or city eq 'Redmond') and price gt 100*

    #### Filter Examples
    The following examples illustrate the use and semantics of each of the logical operators.

    **Example:** *all products with a name equal to 'Milk'*

    
    `GET https://api.contoso.com/v1.0/products?filter=name eq 'Milk'`

    **Example:** *all products with a name not equal to 'Milk'*

   
    `GET https://api.contoso.com/v1.0/products?filter=name ne 'Milk'`
    

    **Example:** *all products with the name 'Milk' that also have a price less than 2.55* 

    
    `GET https://api.contoso.com/v1.0/products?filter=name eq 'Milk' and price lt 2.55`
    

    **Example:** *all products that either have the name 'Milk' or have a price less than 2.55*

    
    `GET https://api.contoso.com/v1.0/products?filter=name eq 'Milk' or price lt 2.55`
    

    **Example:** *all products that have the name 'Milk' or 'Eggs' and have a price less than 2.55*

    `GET https://api.contoso.com/v1.0/products?filter=(name eq 'Milk' or name eq 'Eggs') and price lt 2.55`
    ___
    #### Sorting collections
    
    The results of a collection query **MAY** be sorted based on property values. The property is determined by the value of the `orderBy` query parameter.

    The value of the `orderBy` parameter contains a comma-separated list of expressions used to sort the items. A special case of such an expression is a property path terminating on a primitive property.

    The expression **MAY** include the suffix `asc` for ascending or `desc` for descending, separated from the property name by one or more spaces. If `asc` or `desc` is not specified, the service **MUST** order by the specified property in ascending order.

    Items **MUST** be sorted by the result values of the first expression, and then items with the same value for the first expression are sorted by the result value of the second expression, and so on. The sort order is the inherent order for the type of the property.
   
    #### OrderBy Examples
   
    **Example:**

    *All people sorted by name in ascending order.*
    
    `GET https://api.contoso.com/v1.0/people?orderBy=name`    

    **Example:**

    *All people sorted by name in descending order.*
    
    `GET https://api.contoso.com/v1.0/people?orderBy=name desc`     
    

    Sub-sorts can be specified by a comma-separated list of property names with OPTIONAL direction qualifier.
    
    **Example:**

    *All people sorted by name in descending order and a secondary sort order of hireDate in ascending order.*
    
    `GET https://api.contoso.com/v1.0/people?orderBy=name desc,hireDate`    
    
    Sorting MUST compose with filtering such that:

    *All people whose name is David sorted in ascending order by hireDate.*
    
    `GET https://api.contoso.com/v1.0/people?filter=name eq 'david'&orderBy=hireDate`   
    ___
    #### Pagination

    Pagiantion passes by query to `page` and `pageSize`. 
    
    Default page `1`, pageSize `10`.
    
    **Examples:**

    *All 10 people from first page.*

    `GET https://api.contoso.com/v1.0/people?page=1&pageSize=10`
    ___


  contact:
    name: Vadym Zhufiak
    url: bizico.com
    email: vzhufiak@bizico.com
  version: 0.1.0
servers:
  - url: http://localhost:3000
  - url: http://127.0.0.1:3000
tags: 
  - name: List
    description: Shopping List.
security:
  - bearerAuth: []
paths:
  $ref: ./public/paths/index.yaml    

components:
  $ref: ./public/components/index.yaml


  