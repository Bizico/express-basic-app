openapi: 3.0.0
info:
  title: bizico API.
  description: >
    API looks somewhat restish but not complitely.


    #### Used status codes:

    - `200`, `201`, `301` - **Everythig is ok.**

    - `400`, `401`, `403`, `404` - **API errors.**

    - `500` - **Shit's fucked.**


    #### Possible Error Codes:

    - `E000` - **Validation Error**

    - `E001` - **Authorization Error**

    - `E002` - **Does Nopt Exist Error**

    - `E003` - **Reference Error**

    - `E004` - **Inactive User Error**

    - `E005` - **Parse Error**

    - `E101` - **Email Service Error**

    - `E102` - **Phone Service Error**

    - `E103` - **File Storage Service Error**


    If you encounter anything else, then someone messed up. 

    Most errors containt code (like `A000`) that are described in responses.


    Some things might not work yet.

    Everything here is a subject to change.

    ___

    #### Filtering


    The `filter` querystring parameter allows clients to filter a collection of
    resources that are addressed by a request URL.

    The expression specified with `filter` is evaluated for each resource in the
    collection, and only items where the expression evaluates to true are
    included in the response.

    Resources for which the expression evaluates to false or to null, or which
    reference properties that are unavailable due to permissions, are omitted
    from the response.


    **Example:** return all Products whose Price is less than $10.00 


    `GET https://api.contoso.com/v1.0/products?filter=price lt 10.00`


    The value of the `filter` option is a **Boolean** expression.


    #### Filter operations


    Services that support `filter` **SHOULD** support the following minimal set
    of operations.

     - `eq`  **Equalcity**  *eq 'Redmond'*
     - `ne`  **Not equal** *city ne 'London'*
     - `gt`  **Greater than**  *price gt 20*
     - `ge`  **Greater than or equal**  *price ge 10*
     - `lt`  **Less than** *price lt 20*
     - `le`  **Less than or equal**  *price le 100*
     - `lk`  **SQL LIKE** *name lk %me%*
     - `il`  **SQL ILIKE**  *name lk %ME%*

    Logical Operators    

     - `and` **Logical and**  *price le 200 and price gt 3.5*
     - `or` **Logical or**  *price le 3.5 or price gt 200*

    Grouping Operators    
     
     - `( )` **Precedence grouping**   *(priority eq 1 or city eq 'Redmond') and price gt 100*

    #### Filter Examples

    The following examples illustrate the use and semantics of each of the
    logical operators.


    **Example:** *all products with a name equal to 'Milk'*



    `GET https://api.contoso.com/v1.0/products?filter=name eq 'Milk'`


    **Example:** *all products with a name not equal to 'Milk'*



    `GET https://api.contoso.com/v1.0/products?filter=name ne 'Milk'`



    **Example:** *all products with the name 'Milk' that also have a price less
    than 2.55* 



    `GET https://api.contoso.com/v1.0/products?filter=name eq 'Milk' and price
    lt 2.55`



    **Example:** *all products that either have the name 'Milk' or have a price
    less than 2.55*



    `GET https://api.contoso.com/v1.0/products?filter=name eq 'Milk' or price lt
    2.55`



    **Example:** *all products that have the name 'Milk' or 'Eggs' and have a
    price less than 2.55*


    `GET https://api.contoso.com/v1.0/products?filter=(name eq 'Milk' or name eq
    'Eggs') and price lt 2.55`

    ___

    #### Sorting collections


    The results of a collection query **MAY** be sorted based on property
    values. The property is determined by the value of the `orderBy` query
    parameter.


    The value of the `orderBy` parameter contains a comma-separated list of
    expressions used to sort the items. A special case of such an expression is
    a property path terminating on a primitive property.


    The expression **MAY** include the suffix `asc` for ascending or `desc` for
    descending, separated from the property name by one or more spaces. If `asc`
    or `desc` is not specified, the service **MUST** order by the specified
    property in ascending order.


    Items **MUST** be sorted by the result values of the first expression, and
    then items with the same value for the first expression are sorted by the
    result value of the second expression, and so on. The sort order is the
    inherent order for the type of the property.


    #### OrderBy Examples


    **Example:**


    *All people sorted by name in ascending order.*


    `GET https://api.contoso.com/v1.0/people?orderBy=name`    


    **Example:**


    *All people sorted by name in descending order.*


    `GET https://api.contoso.com/v1.0/people?orderBy=name desc`     



    Sub-sorts can be specified by a comma-separated list of property names with
    OPTIONAL direction qualifier.


    **Example:**


    *All people sorted by name in descending order and a secondary sort order of
    hireDate in ascending order.*


    `GET https://api.contoso.com/v1.0/people?orderBy=name desc,hireDate`    


    Sorting MUST compose with filtering such that:


    *All people whose name is David sorted in ascending order by hireDate.*


    `GET https://api.contoso.com/v1.0/people?filter=name eq
    'david'&orderBy=hireDate`   

    ___

    #### Pagination


    Pagiantion passes by query to `page` and `pageSize`. 


    Default page `1`, pageSize `10`.


    **Examples:**


    *All 10 people from first page.*


    `GET https://api.contoso.com/v1.0/people?page=1&pageSize=10`

    ___
  contact:
    name: Vadym Zhufiak
    url: bizico.com
    email: vzhufiak@bizico.com
  version: 0.1.0
servers:
  - url: 'http://localhost:3000'
  - url: 'http://127.0.0.1:3000'
tags:
  - name: List
    description: Shopping List.
security:
  - bearerAuth: []
paths:
  /api/list:
    get:
      summary: List of Items
      description: Get All List of Shopping Items
      tags:
        - List
      parameters:
        - name: filter
          description: Filtration
          in: query
          required: false
          schema:
            type: string
        - name: orderBy
          description: Order By Expression
          in: query
          required: false
          schema:
            type: string
        - name: page
          description: Page
          in: query
          required: false
          schema:
            type: number
        - name: pageSize
          description: Size of Page
          in: query
          required: false
          schema:
            type: number
      responses:
        '200':
          $ref: '#/components/responses/List'
        '400':
          $ref: '#/components/responses/LoginError'
        '500':
          $ref: '#/components/responses/ServerError'
      security: []
  '/api/list/{id}':
    get:
      summary: Get Item By ID.
      description: Obtain List Item using it's ID
      tags:
        - List
      parameters:
        - name: id
          description: Item ID
          in: path
          required: false
          schema:
            type: number
      responses:
        '200':
          $ref: '#/components/responses/Item'
        '400':
          $ref: '#/components/responses/UsersGetError'
        '500':
          $ref: '#/components/responses/ServerError'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ServerError:
      type: object
      properties:
        message:
          type: string
    BaseError:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        status:
          type: number
        fields:
          type: object
          additionalProperties:
            type: object
            properties:
              message:
                type: string
    Pagination:
      type: object
      properties:
        page:
          type: number
          example: 1
        pageSize:
          type: number
          example: 10
        rowCount:
          type: number
          example: 1
        pageCount:
          type: number
          example: 1
    ValidationError:
      allOf:
        - $ref: '#/components/schemas/BaseError'
      description: Thrown when request parameters are inapropriate.
      example:
        code: A000
        message: Bad request.
        status: 400
        fields:
          password:
            message: Must be at least 6 chars
    QueryParseError:
      allOf:
        - $ref: '#/components/schemas/BaseError'
      description: Thrown when request filter/orderBy parameters are inapropriate.
      example:
        code: A000
        message: Can't parse to Logical Expression.
        status: 400
    AuthorizationError:
      allOf:
        - $ref: '#/components/schemas/BaseError'
      description: Thrown when user has no access rights.
      example:
        code: E001
        message: Not authorized.
        status: 403
    Empty:
      type: object
    User:
      type: object
      properties:
        id:
          type: number
          example: 1
        email:
          type: string
          example: user@bizico.com
        first_name:
          type: string
          example: Foo
        last_name:
          type: string
          example: Bar
        avatar:
          type: object
          properties:
            thumbnail:
              type: string
              example: .../thumbnail
            small:
              type: string
              example: .../small
            medium:
              type: string
              example: .../medium
        location:
          type: string
          example: Here.
        ban:
          type: boolean
          example: true
        active:
          type: boolean
          example: true
        username:
          type: string
          example: xxx_casual_user_xxx
    Item:
      type: object
      properties:
        id:
          type: number
          example: 1
        name:
          type: string
          example: Milk
        qty:
          type: number
          example: 2
        price:
          type: number
          example: 2.7
    List:
      type: array
      items:
        $ref: '#/components/schemas/Item'
  requestBodies:
    Email:
      description: A JSON object contaning email.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                example: missing@sdsa.com
    Recover:
      description: Data requred for password reset.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                example: '@bizico.com'
    Restore:
      description: Data requred for password reset.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              hash:
                type: string
                example: $2a$10$rlCWKHTw24rS6gXFVKr2hOv8KHdYuf/qc0PdJyQOesCy.kKka3QHu
              password:
                type: string
                example: brand_new_password
              password_repeat:
                type: string
                example: brand_new_password
    ChangePassword:
      description: Data requred for password change.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              old_password:
                type: string
                example: old_password
              password:
                type: string
                example: brand_new_password
              password_repeat:
                type: string
                example: brand_new_password
    Join:
      description: Join Data.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              invite:
                type: string
                example: $2b$10$faBdPjD4IF6BGCq4YblFH.wxwcqD8ou1bpT.BGbUqE4qkOer7Tn5W
              password:
                type: string
                example: SomeComplexPa$$word
              password_repeat:
                type: string
                example: SomeComplexPa$$word
    Login:
      description: Login Data.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                example: sdds@bizico.com
              password:
                type: string
                example: SomeComplexPa$$word
    Invite:
      description: Invite  data.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                example: asa@bizico.com
  responses:
    Empty:
      description: |
        Empty Object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Empty'
    Item:
      description: |
        Empty Object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Item'
    List:
      description: |
        Empty Object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/List'
    Name:
      description: |
        Object.
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                example: person_to_invite@bizico.com
    LoginSuccess:
      description: Token payload.
      content:
        application/json:
          schema:
            type: object
            properties:
              token:
                type: string
            example:
              token: >-
                eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFkbWluQG9wdGltaXplci5jb20iLCJpYXQiOjE1MTA5MDY1NTd9.uPr_WWLMu26lEWyxr2XBn2uTyUL3zBywR7AhdPPWLhA
    LoginError:
      description: |
        Failed to login.
        Possible error codes:
        - A000 - No  with such email and password.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'
    JoinError:
      description: |
        Failed to Join.
        Possible error codes:
        - A000 - Incorrect/Bad Invite Token.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'
    InviteError:
      description: |
        Failed to Join.
        Possible error codes:
        - A001 -  with given email, already exist.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'
    RestoreError:
      description: |
        Failed to Join.
        Possible error codes:
        - A010 - Incorrect/Bad Invite Token.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'
    ChangePasswordError:
      description: |
        Failed to Change Password.
        Possible error codes:
        - A000 -  Does Not Exist.
        - A011 - Bad Old Password. 
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'
    RecoverError:
      description: |
        Failed to Join.
        Possible error codes:
        - A000 - No  with provided email.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'
    UserGetError:
      description: |
        Failed to Get User.
        Possible error codes:
        - U000 - User Does Not Exist.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'
    UserBanError:
      description: |
        Failed to Ban User.
        Possible error codes:
        - U000 - User Does Not Exist.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'
    UserUnBanError:
      description: |
        Failed to Unban User.
        Possible error codes:
        - U000 - User Does Not Exist.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'
    UsersGetError:
      description: |
        Failed to Get Users List.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/QueryParseError'
    UserGetSuccess:
      description: User.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    UsersGetSuccess:
      description: List of Users.
      content:
        application/json:
          schema:
            type: object
            properties:
              results:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              pagination:
                $ref: '#/components/schemas/Pagination'
    ServerError:
      description: Something went terribly wrong.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServerError'
    AuthorizationError:
      description: Not authorized.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthorizationError'

